#+title: LLM/AI Integration Configuration
#+author: Jeff Farr
#+property: header-args:emacs-lisp :tangle gpt.el
#+auto_tangle: y

* Introduction
This file configures various large language model (LLM) and AI integrations for Emacs,
including OpenAI GPT, Anthropic Claude, and Perplexity models. It sets up interactive
shells, buffers, and tools for working with these AI assistants.

* Basic Configuration
Setup lexical binding for better closures and variable scoping.

#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
#+end_src

* ChatGPT Shell
Configure Xenodium's ChatGPT shell for a conversational interface with OpenAI models.

#+begin_src emacs-lisp
  (use-package shell-maker
    :straight (shell-maker :type git :host github :repo "xenodium/shell-maker" :files ("shell-maker.el")))

  ; add :build (:not compile) if byte code has problems
  (use-package chatgpt-shell
    :requires shell-maker
    :straight (:host github :repo "xenodium/chatgpt-shell" :files ("*.el") :build (:not compile)))

  (setq chatgpt-shell-openai-key
        (lambda ()
          (auth-source-pick-first-password :host "api.openai.com")))

  ;;(setq chatgpt-shell-model-version "gpt-4o")
#+end_src

* GPTEL
Configure gptel, a versatile LLM client with support for multiple models and providers.

#+begin_src emacs-lisp
  (use-package gptel
    :straight t
    :custom
    (gptel-model 'gpt-4o) ;; model is now a symbol, not a string
    :config
    ;; Configure Perplexity backend
    (gptel-make-perplexity "Perplexity"
      :key (lambda () (auth-source-pick-first-password :host "api.perplexity.ai"))
      :stream t)
    
    ;; Configure Anthropic backend for Claude Sonnet
    (gptel-make-anthropic "Claude"
      :stream t
      :key (lambda () (auth-source-pick-first-password :host "api.anthropic.com")))
    
    ;; Configure Anthropic backend for Claude 3.7 Sonnet with thinking mode
    (gptel-make-anthropic "Claude-thinking"
      :key (lambda () (auth-source-pick-first-password :host "api.anthropic.com"))
      :stream t
      :models '(claude-3-7-sonnet-20250219)
      :header (lambda () 
                (let ((key (gptel--get-api-key 
                            ;; Explicitly use the same key function as defined above
                            (lambda () (auth-source-pick-first-password :host "api.anthropic.com")))))
                  `(("x-api-key" . ,key)
                    ("anthropic-version" . "2023-06-01")
                    ("anthropic-beta" . "pdfs-2024-09-25")
                    ("anthropic-beta" . "output-128k-2025-02-19")
                    ("anthropic-beta" . "prompt-caching-2024-07-31"))))
      :request-params '(:thinking (:type "enabled" :budget_tokens 2048)
                        :max_tokens 4096)))
#+end_src

* GPTEL Tools
Define custom tools and functions that can be used by LLMs to interact with the Emacs environment.

#+begin_src emacs-lisp
  (gptel-make-tool
   :name "create_file"                    ; javascript-style  snake_case name
   :function (lambda (path filename content)   ; the function that runs
               (let ((full-path (expand-file-name filename path)))
                 (with-temp-buffer
                   (insert content)
                   (write-file full-path))
                 (format "Created file %s in %s" filename path)))
   :description "Create a new file with the specified content"
   :args (list '(:name "path"             ; a list of argument specifications
                 :type string
                 :description "The directory where to create the file")
               '(:name "filename"
                 :type string
                 :description "The name of the file to create")
               '(:name "content"
                 :type string
                 :description "The content to write to the file"))
   :category "filesystem")                ; An arbitrary label for grouping
#+end_src


* Elysium
Setup Elysium, a streamlined interface for using Claude models from Emacs.

#+begin_src emacs-lisp
  (use-package elysium
    :straight (:host github :repo "lanceberge/elysium" :branch "main" :files ("*.el")))
#+end_src

