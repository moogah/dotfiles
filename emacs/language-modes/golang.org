#+title: Go Mode Configuration
#+author: Jeff Farr
#+property: header-args:emacs-lisp :tangle golang.el
#+auto_tangle: y

* Introduction
This file configures Go (Golang) development environment in Emacs, providing syntax highlighting, code formatting, and org-babel integration.

* Basic Configuration
Setup lexical binding for better closures and variable scoping.

#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
#+end_src

* Go Mode
** Core Go Mode
The go-mode package provides syntax highlighting and basic editing features for Go files.

[[https://github.com/dominikh/go-mode.el][Documentation]]

#+begin_src emacs-lisp
(use-package go-mode
  :straight t)
#+end_src

** Org-Babel Go Integration
The ob-go package provides org-babel support for evaluating Go code blocks in org-mode documents.

[[https://github.com/pope/ob-go][Documentation]]

#+begin_src emacs-lisp
(use-package ob-go
  :straight t)
#+end_src

* Usage Notes
** Go Mode Features
Go-mode provides several features for Go development:

- Syntax highlighting for Go source files
- Indentation support
- Commands for interacting with Go tools
- Integration with the go toolchain

** Org-Babel Go
With ob-go, you can include executable Go code blocks in org-mode documents:

```org
#+begin_src go
  package main
  
  import "fmt"
  
  func main() {
      fmt.Println("Hello, Go!")
  }
#+end_src
```

* External Dependencies
For the best Go development experience, make sure you have the following tools installed:

1. Go compiler and tools: https://golang.org/doc/install
2. gopls (Go language server): `go install golang.org/x/tools/gopls@latest`
3. goimports: `go install golang.org/x/tools/cmd/goimports@latest`

* TODO Improvements
- Add gofmt/goimports integration for automatic formatting
- Configure LSP support for Go through lsp-mode or eglot
- Add go-eldoc for documentation display
- Configure testing tools integration
- Add go-guru for advanced code navigation
- Consider adding snippets for common Go patterns
