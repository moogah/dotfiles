#+title: Python Mode Configuration
#+author: Jeff Farr
#+property: header-args:emacs-lisp :tangle python.el
#+auto_tangle: y

* Introduction
This file configures Python development environment in Emacs, setting up syntax checking, code formatting, import sorting, and syntax highlighting.

* Basic Configuration
Setup lexical binding for better closures and variable scoping.

#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
#+end_src

* Syntax Checking
** Flycheck
Flycheck provides on-the-fly syntax checking for many programming languages including Python.

[[https://www.flycheck.org/en/latest/][Documentation]]

#+begin_src emacs-lisp
(use-package flycheck
  :straight t
  :init (global-flycheck-mode))
#+end_src

* Code Formatting
** Blacken
Blacken is an interface to the Black code formatter for Python.

[[https://github.com/pythonic-emacs/blacken][Documentation]]

Black is an opinionated Python code formatter that enforces a consistent style without requiring configuration.

#+begin_src emacs-lisp
(use-package blacken
  :straight t
  :config
  (add-hook 'python-mode-hook 'blacken-mode))
#+end_src

** Python-isort
Python-isort provides integration with isort, which sorts and formats Python imports.

[[https://github.com/wyuenho/emacs-python-isort][Documentation]]

#+begin_src emacs-lisp
(use-package python-isort
  :straight (:host github :repo "wyuenho/emacs-python-isort")
  :config
  (add-hook 'python-mode-hook 'python-isort-on-save-mode))
#+end_src

* Syntax Highlighting
Enable Tree-sitter for improved syntax highlighting in Python mode.

#+begin_src emacs-lisp
(add-hook 'python-mode-hook 'tree-sitter-hl-mode)
#+end_src

* External Dependencies

** Installing pylint
Pylint is a static code analysis tool for Python that checks for errors and enforces coding standards.

Flycheck's docs suggest installing pylint with pip, but it's better to use your system package manager:

#+begin_src bash :dir ~/ :prologue exec 2>&1 :epilogue "true" :results output :tangle no
brew install pylint
#+end_src

Verify installation:
#+begin_src sh :dir ~/ :prologue exec 2>&1 :epilogue "true" :results output :tangle no
which pylint
#+end_src

#+RESULTS:
: /opt/homebrew/bin/pylint

* Configuration Notes

** Flycheck Configuration
If Flycheck doesn't automatically detect pylint, you may need the following configuration:

#+begin_src emacs-lisp
;; Set the path to pylint executable if needed
;; (setq flycheck-python-pylint-executable "pylint")
#+end_src

* Troubleshooting

If you encounter this error with Elpy:
```
Debugger entered--Lisp error: (process-sentinel "exited abnormally with code 1")
  signal(process-sentinel ("exited abnormally with code 1"))
```

Run:
```
M-x elpy-rpc-reinstall-virtualenv
```

* TODO Improvements
- Consider adding support for Python virtual environments with pyvenv or similar packages
- Add LSP configuration for Python (either through lsp-mode or eglot)
- Add pytest integration for running tests directly from Emacs
