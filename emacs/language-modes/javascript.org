#+auto_tangle: y

#+begin_src emacs-lisp :tangle yes
  (use-package js2-mode
    :straight t
    :config
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
    (add-to-list 'auto-mode-alist '("\\.cjs\\'" . js2-mode))
    (add-to-list 'auto-mode-alist '("\\.mjs\\'" . js2-mode)))

  (use-package rjsx-mode
    :straight t
    :mode "\\.jsx\\'"
    :init
    (add-hook 'rjsx-mode-hook 'lsp))

  (use-package prettier-js
    :straight t
    :hook ((js2-mode . prettier-js-mode)
           (typescript-mode . prettier-js-mode)
           (rjsx-mode . prettier-js-mode)))
#+end_src

* Setup ESLint with Flycheck

ESlint behaves differently in differnet versions so we want to try to use the version found in a projects `node_modules`

#+begin_src emacs-lisp :tangle yes
  (defun my/use-eslint-from-node-modules ()
    "Use local eslint from node_modules before global."
    (let* ((root (locate-dominating-file
                  (or (buffer-file-name) default-directory)
                  "node_modules"))
           (eslint (and root
                        (expand-file-name "node_modules/.bin/eslint"
                                          root))))
      (when (and eslint (file-executable-p eslint))
        (setq-local flycheck-javascript-eslint-executable eslint))))
  (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)
#+end_src

if supporting multiple node_modules is needed, try this:

#+begin_src emacs-lisp
  (defun my/use-eslint-from-node-modules ()
    "Use local eslint from node_modules before global."
    (let* ((project-root (or
                          (projectile-project-root)
                          (locate-dominating-file default-directory "node_modules")))
           (eslint (and project-root
                        (expand-file-name "node_modules/.bin/eslint"
                                          project-root))))
      (if (and eslint (file-executable-p eslint))
          (setq-local flycheck-javascript-eslint-executable eslint)
        (setq-local flycheck-javascript-eslint-executable "eslint"))))
  (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)
#+end_src


* Use project local Prettier install

#+begin_src emacs-lisp :tangle yes
  (defun my/use-prettier-from-node-modules ()
    "Use local prettier from node_modules before global."
    (let* ((project-root (or
                          (projectile-project-root)
                          (locate-dominating-file default-directory "node_modules")))
           (prettier (and project-root
                          (expand-file-name "node_modules/.bin/prettier"
                                            project-root))))
      (if (and prettier (file-executable-p prettier))
          (setq-local prettier-js-command prettier)
        (setq-local prettier-js-command "prettier"))))
  (add-hook 'prettier-js-mode-hook #'my/use-prettier-from-node-modules)
#+end_src


* Extras

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package turbo-log
    :straight (:host github :repo "artawower/turbo-log.el")
    ;; :bind (("C-s-l" . turbo-log-print)
    ;;        ("C-s-i" . turbo-log-print-immediately)
    ;;        ("C-s-h" . turbo-log-comment-all-logs)
    ;;        ("C-s-s" . turbo-log-uncomment-all-logs)
    ;;        ("C-s-[" . turbo-log-paste-as-logger)
    ;;        ("C-s-]" . turbo-log-paste-as-logger-immediately)
    ;;        ("C-s-d" . turbo-log-delete-all-logs))
    :config
    (setq turbo-log-msg-format-template "\"ðŸš€: %s\"")
    (setq turbo-log-allow-insert-without-treesit-p t))

  (turbo-log-configure
   :modes (typescript-mode typescriptreact-mode js2-mode web-mode)
   :strategy merge

   :loggers ("console.log(%s)" "console.debug(%s)" "console.warn(%s)")
   :jump-list ((class_declaration (method_definition "constructor")))
   :identifier-node-types (identifier member_expression)
   :post-insert-hook (prettier-prettify)
   :msg-format-template "'ðŸ¦„: %s'")
#+END_SRC
=======
#+title: JavaScript Mode Configuration
#+author: Jeff Farr
#+property: header-args:emacs-lisp :tangle javascript.el
#+auto_tangle: y

* Introduction
This file configures JavaScript development environment in Emacs, setting up syntax highlighting, indentation, and support for various JavaScript file formats and frameworks.

* Basic Configuration
Setup lexical binding for better closures and variable scoping.

#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
#+end_src

* JavaScript Modes
** JS2 Mode
JS2-mode is an improved JavaScript mode for Emacs, with better syntax highlighting and indentation.

#+begin_src emacs-lisp
(use-package js2-mode
  :straight t
  :config
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  (add-to-list 'auto-mode-alist '("\\.cjs\\'" . js2-mode))
  (add-to-list 'auto-mode-alist '("\\.mjs\\'" . js2-mode)))
#+end_src

** RJSX Mode
RJSX mode is an improved JSX mode derived from js2-mode.

#+begin_src emacs-lisp
(use-package rjsx-mode
  :straight t
  :mode "\\.jsx\\'"
  :init
  (add-hook 'rjsx-mode-hook 'lsp))
#+end_src

* Code Formatting
** Prettier Integration
Prettier is a code formatter that enforces a consistent style across JavaScript files.

#+begin_src emacs-lisp
(use-package prettier-js
  :straight t
  :hook ((js2-mode . prettier-js-mode)
         (typescript-mode . prettier-js-mode)
         (rjsx-mode . prettier-js-mode)))
#+end_src

** Project-local Prettier Configuration
Use the project's local prettier installation instead of the global one.

#+begin_src emacs-lisp
(defun my/use-prettier-from-node-modules ()
  "Use local prettier from node_modules before global."
  (let* ((project-root (or
                        (projectile-project-root)
                        (locate-dominating-file default-directory "node_modules")))
         (prettier (and project-root
                        (expand-file-name "node_modules/.bin/prettier"
                                          project-root))))
    (if (and prettier (file-executable-p prettier))
        (setq-local prettier-js-command prettier)
      (setq-local prettier-js-command "prettier"))))
(add-hook 'prettier-js-mode-hook #'my/use-prettier-from-node-modules)
#+end_src

* Linting
** ESLint Configuration
Use the project's local ESLint installation for better consistency with the project's coding standards.

#+begin_src emacs-lisp
(defun my/use-eslint-from-node-modules ()
  "Use local eslint from node_modules before global."
  (let* ((root (locate-dominating-file
                (or (buffer-file-name) default-directory)
                "node_modules"))
         (eslint (and root
                      (expand-file-name "node_modules/.bin/eslint"
                                        root))))
    (when (and eslint (file-executable-p eslint))
      (setq-local flycheck-javascript-eslint-executable eslint))))
(add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)
#+end_src

* Development Tools
** Turbo Log
Turbo-log helps with adding console.log statements to your JavaScript code.

#+begin_src emacs-lisp
(use-package turbo-log
  :straight (:host github :repo "artawower/turbo-log.el")
  ;; :bind (("C-s-l" . turbo-log-print)
  ;;        ("C-s-i" . turbo-log-print-immediately)
  ;;        ("C-s-h" . turbo-log-comment-all-logs)
  ;;        ("C-s-s" . turbo-log-uncomment-all-logs)
  ;;        ("C-s-[" . turbo-log-paste-as-logger)
  ;;        ("C-s-]" . turbo-log-paste-as-logger-immediately)
  ;;        ("C-s-d" . turbo-log-delete-all-logs))
  :config
  (setq turbo-log-msg-format-template "\"ðŸš€: %s\"")
  (setq turbo-log-allow-insert-without-treesit-p t))

(turbo-log-configure
 :modes (typescript-mode typescriptreact-mode js2-mode web-mode)
 :strategy merge

 :loggers ("console.log(%s)" "console.debug(%s)" "console.warn(%s)")
 :jump-list ((class_declaration (method_definition "constructor")))
 :identifier-node-types (identifier member_expression)
 :post-insert-hook (prettier-prettify)
 :msg-format-template "'ðŸ¦„: %s'")
#+end_src

* Usage Notes
** Working with React JSX Files
JSX files are configured to use RJSX-mode which provides better syntax highlighting and indentation for React JSX syntax.


** Using ESLint and Prettier
The configuration automatically uses the project-local ESLint and Prettier installations if available, ensuring consistent code formatting and linting with your project's standards.

* TODO Improvements
- Consider adding additional JavaScript testing framework integration
- Add JavaScript-specific snippets for common patterns
- Explore integration with Node.js debugging tools
