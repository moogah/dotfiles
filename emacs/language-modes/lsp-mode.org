#+TITLE: LSP Mode Configuration
#+AUTHOR: Jeff Farr
#+auto_tangle: y
#+PROPERTY: header-args:emacs-lisp :tangle yes

* LSP Mode
Language Server Protocol (LSP) provides IDE-like features for various programming languages.

** Base Configuration
#+begin_src emacs-lisp
  (use-package lsp-mode
    :straight t
    :init
    ;; Set prefix for lsp-command-keymap
    (setq lsp-keymap-prefix "C-c l")
    :hook
    (python-mode . lsp)
    (typescript-mode . lsp)
    (js2-mode . lsp)
    (js-mode . lsp)
    ;; If you want lsp on org babel src blocks
    ;; (org-mode . lsp-deferred)
    :commands lsp)
#+end_src

** LSP UI
LSP UI provides UI enhancements for lsp-mode
#+begin_src emacs-lisp
  (use-package lsp-ui
    :straight t
    :commands lsp-ui-mode
    :config
    (setq lsp-ui-doc-enable t)
    (setq lsp-ui-doc-position 'at-point)
    (setq lsp-ui-sideline-enable t)
    (setq lsp-ui-sideline-show-diagnostics t)
    ;; Enable breadcrumbs in header line
    (setq lsp-headerline-breadcrumb-enable t)
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    ;; Configure lsp-ui-peek
    (setq lsp-ui-peek-enable t))
#+end_src

** Flycheck Integration
#+begin_src emacs-lisp
  ;; Ensure LSP uses flycheck
  (use-package lsp-mode
    :config
    (setq lsp-prefer-flymake nil))
#+end_src

* Language Server Configuration

** Python
#+begin_src emacs-lisp
  ;; Python - pyright (Microsoft's Python Language Server)
  (use-package lsp-pyright
    :straight t
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp))))
#+end_src

** TypeScript & JavaScript
#+begin_src emacs-lisp
  ;; TypeScript and JavaScript setup via typescript-language-server
  (use-package lsp-mode
    :config
    ;; TypeScript specific settings
    (setq lsp-typescript-suggest-complete-function-calls t)
    (setq lsp-typescript-format-enable t)
    ;; JavaScript specific settings
    (setq lsp-javascript-suggest-complete-function-calls t)
    (setq lsp-javascript-format-enable t))
#+end_src

* Performance Tuning
#+begin_src emacs-lisp
  ;; Performance adjustments for LSP
  (setq gc-cons-threshold 100000000)          ;; 100mb
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
  (setq lsp-idle-delay 0.500)                 ;; 500ms
  (setq lsp-log-io nil)                       ;; Disable logging for better performance
  (setq lsp-completion-provider :capf)        ;; Use capf for completion
  
  ;; Optional performance settings
  (setq lsp-enable-file-watchers nil)         ;; Disable file watchers for large projects
  (setq lsp-enable-folding nil)               ;; Disable folding
  (setq lsp-enable-on-type-formatting nil)    ;; Disable on-type formatting
  (setq lsp-enable-snippet nil)               ;; Disable snippets (if you don't use them)
#+end_src

* Extra Packages (Optional)
#+begin_src emacs-lisp
  ;; DAP Mode for debugging capabilities
  ;; (use-package dap-mode
  ;;   :straight t
  ;;   :after lsp-mode
  ;;   :config
  ;;   (dap-auto-configure-mode))
  
  ;; LSP Treemacs integration for project symbols view
  ;; (use-package lsp-treemacs
  ;;   :straight t
  ;;   :commands lsp-treemacs-errors-list
  ;;   :config
  ;;   (lsp-treemacs-sync-mode 1))
#+end_src
