#+auto_tangle: y

* Install Evil

#+begin_src emacs-lisp :tangle yes
  ;; ===============================================================================
  ;; configure evil mode
  ;; ===============================================================================

  (use-package evil
    :straight t
    :config
    (use-package evil-surround
      :straight t
      :config
      (global-evil-surround-mode 1))
    (use-package evil-matchit
      :straight t
      :config
      (global-evil-matchit-mode 1))
    (evil-mode 1)
    (setq evil-want-fine-undo t)
    (add-hook 'org-capture-mode-hook 'evil-insert-state) ;; use insert by default for org capture
    (add-hook 'git-commit-mode-hook 'evil-insert-state) ;; use insert mode by default for magit commits
    (when (dirvish-override-dired-mode))
      (evil-set-initial-state 'dired-mode 'emacs)
    (use-package goto-chg
      :straight t))

  ;; add visual indicators for common vim commands
  (use-package evil-goggles
    :straight t
    :config
    (evil-goggles-mode))

  (use-package evil-args
    :straight t
    :config
    (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
    (define-key evil-outer-text-objects-map "a" 'evil-inner-arg)
    (define-key evil-normal-state-map "L" 'evil-forward-arg)
    (define-key evil-normal-state-map "H" 'evil-backward-arg)
    (define-key evil-motion-state-map "L" 'evil-forward-arg)
    (define-key evil-motion-state-map "H" 'evil-backward-arg)
    (define-key evil-normal-state-map "K" 'evil-jump-out-args))
#+end_src

* Configure "Spacemacs" Style Keybindings

#+begin_src emacs-lisp :tangle yes
  (defun my-split-or-switch-window-left ()
    "Create a new window on the left and open dired, if a window already exists move there"
    (interactive)
    (if (= 1 (count-windows))
        (progn
          (split-window-horizontally)
          (dired-jump nil))
      (progn
        (evil-window-left 1))))


  (defun my-split-or-switch-window-right ()
    "Create a new window on the right and open dired, if a window already exists move there"
    (interactive)
    (if (= 1 (count-windows))
        (progn
          (split-window-horizontally)
          (other-window 1)
          (dired-jump nil))
      (progn
        (evil-window-right 1))))
#+end_src

#+begin_src emacs-lisp :tangle yes
  (defun my-find-implementation-or-test-other-window ()
    "Finds the corresponding test or implementation window and opens it in a new or existing horizontal split"
    (interactive)
    (let ((file (projectile-find-implementation-or-test (buffer-file-name))))
      (if file
          (progn (my-split-or-switch-window-right) (find-file file)))))
#+end_src

#+begin_src emacs-lisp :tangle yes
  ;; Create a cleaner, hierarchical keybinding system
  (defvar my/evil-keybindings-map
    '((core . ((normal . ((global . (("<SPC> w c" . delete-window)
                                     ("<SPC> w v" . split-window-vertically)
                                     ("<SPC> w j" . evil-window-down)
                                     ("<SPC> w k" . evil-window-up)
                                     ("<SPC> <SPC> j" . previous-buffer)
                                     ("<SPC> <SPC> k" . next-buffer)
                                     ("<SPC> x" . kill-this-buffer)))))))
      (hydra . ((normal . ((global . (("<SPC> <SPC> h" . hydra-main/body)))))))
      (org . ((normal . ((global . (("<SPC> e" . org-babel-execute-src-block)
                                   ("<SPC> s l" . org-store-link)
                                   ("<SPC> i l" . org-insert-link)))
                        (org-mode-map . (("<SPC> h" . org-insert-heading)
                                        ("<SPC> H" . org-insert-subheading)))))))
      (org-roam . ((normal . ((global . (("<SPC> n" . org-roam-node-find)
                                        ("<SPC> j" . org-roam-dailies-goto-today)))))))
      (projectile . ((normal . ((global . (("<SPC> r" . projectile-ripgrep)
                                          ("<SPC> f" . project-find-file)
                                          ("<SPC> p p" . consult-projectile-switch-project)))
                              (python-mode-map . (("<SPC> T" . my-find-implementation-or-test-other-window)))))))
      (magit . ((normal . ((global . (("<SPC> g" . magit)
                                     ("<SPC> g s" . magit-status)
                                     ("<SPC> g b" . magit-blame)
                                     ("<SPC> g l" . magit-log)
                                     ("<SPC> g f" . magit-file-dispatch)
                                     ("<SPC> g d" . magit-diff-buffer-file)
                                     ("<SPC> g c" . magit-commit)
                                     ("<SPC> g p" . magit-push)))))))
      (dirvish . ((normal . ((global . (("<SPC> d" . dired-jump)
                                       ("<SPC> w h" . my-split-or-switch-window-left)
                                       ("<SPC> w l" . my-split-or-switch-window-right)))))))
      (consult . ((normal . ((global . (("<SPC> b" . consult-bookmark)
                                       ("<SPC> o" . consult-buffer)
                                       ("<SPC> m m" . consult-imenu-multi)
                                       ("<SPC> m i" . consult-imenu)))))))
      (perspective . ((normal . ((global . (("<SPC> p s" . persp-switch)
                                           ("<SPC> p S" . persp-state-save)
                                           ("<SPC> p L" . persp-state-load)))))))
      (tab-bar . ((normal . ((global . (("<SPC> t" . tab-switch))))))))
    "Hierarchical map of evil keybindings organized by feature.
     Structure: (feature . ((state . ((keymap . ((key . command) ...)) ...)) ...))
     - feature: symbol for the feature that triggers binding application
     - state: evil state symbol (normal, insert, etc.)
     - keymap: keymap to bind in
     - key: key sequence as string (will be processed with kbd)
     - command: function to bind to the key")

  (defun my/apply-evil-keybindings-for-map (feature states-map)
    "Apply evil keybindings for FEATURE based on the provided STATES-MAP."
    (dolist (state-entry states-map)
      (let ((state (car state-entry))
            (keymaps-map (cdr state-entry)))
        (dolist (keymap-entry keymaps-map)
          (let ((keymap (car keymap-entry))
                (bindings (cdr keymap-entry)))
            (dolist (binding bindings)
              (let ((key (car binding))
                    (cmd (cdr binding)))
                (message "Applying evil keybinding for %s: %s in %s" feature key state)
                (evil-define-key state keymap (kbd key) cmd))))))))

  ;; Apply core bindings immediately
  (my/apply-evil-keybindings-for-map 'core (cdr (assq 'core my/evil-keybindings-map)))

  ;; Set up hooks for deferred loading
  (dolist (feature-entry my/evil-keybindings-map)
    (let ((feature (car feature-entry)))
      (unless (eq feature 'core)
        (eval-after-load (symbol-name feature)
          `(lambda () 
             (my/apply-evil-keybindings-for-map ',feature ',(cdr feature-entry)))))))
#+end_src 
